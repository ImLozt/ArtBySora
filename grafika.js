

  /*‚Äî 2. video preview (bude-li na str√°nce) ‚Äî*/
  document.querySelectorAll('.video-box').forEach(box => {
    const video = box.querySelector('.preview-video');
    const btn   = box.querySelector('.sound-toggle');
    box.addEventListener('mouseenter', () => video.play());
    box.addEventListener('mouseleave', () => { video.pause(); video.currentTime = 0; });
    btn?.addEventListener('click', () => {
      video.muted = !video.muted;
      btn.textContent = video.muted ? 'üîà' : 'üîä';
    });
  });
  
  /*‚Äî 2b. Otev≈ô√≠t video do fullscreen overlay ‚Äî*/
document.querySelectorAll('.video-box').forEach(box => {
  const video = box.querySelector('.preview-video');
  const caption = box.querySelector('p')?.textContent ?? '';

  // klik na cel√© pole (mimo tlaƒç√≠tko zvuku)
  box.addEventListener('click', e => {
    // nechceme reagovat, kdy≈æ u≈æivatel klepne na ikonku üîà/üîä
    if (e.target.closest('.sound-toggle')) return;

    const overlay = document.createElement('div');
    overlay.className = 'fullscreen-overlay';
    overlay.innerHTML = `
      <video src="${video.currentSrc || video.src}" autoplay loop controls></video>
      <p>${caption}</p>
    `;
    overlay.addEventListener('click', () => overlay.remove());
    document.body.appendChild(overlay);
  });
});



/* ‚Äî SCHOV√ÅN√ç / ZOBRAZEN√ç HLAVIƒåKY P≈òES OPACITY ‚Äî */
(() => {
  const header = document.getElementById('hero-header');
  let prev = window.scrollY;

  window.addEventListener('scroll', () => {
    const cur = window.scrollY;

    if (cur > prev && cur > 80) {   // 80 px = kousek pod header
      header.classList.add('hidden');   // scroll dol≈Ø
    } else {
      header.classList.remove('hidden'); // scroll nahoru
    }
    prev = cur;
  });
})();




/* ‚Äî‚Äî‚Äî P≈òEPSAN√Å ƒå√ÅST PRO ‚ÄûKLIK NA OBR√ÅZEK + FULLSCREEN S MINI-THUMBNAILY‚Äú ‚Äî‚Äî‚Äî */
(() => {
  // 1) Vytvo≈ô√≠me a vlo≈æ√≠me do <body> jedin√© <div class="fullscreen-overlay">, kter√© budeme znovu a znovu zobrazovat
  const overlay = document.createElement('div');
  overlay.className = 'fullscreen-overlay';
  overlay.style.display = 'none';         // na zaƒç√°tku skryt√©
  overlay.style.position = 'fixed';
  overlay.style.inset = '0';
  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';
  overlay.style.zIndex = '9999';
  overlay.style.justifyContent = 'center';
  overlay.style.alignItems = 'center';

  // Vlo≈æ√≠me do overlaye HTML: k≈ô√≠≈æek, hlavn√≠ <img>, kontejner pro mini-n√°hledy
  overlay.innerHTML = `
    <span id="overlay-close">‚úñ</span>
    <img id="overlay-main-img" src="" alt="">
    <div id="overlay-thumbs"></div>
  `;
  document.body.appendChild(overlay);

  // 2) Promƒõnn√© pro aktu√°ln√≠ skupinu a index v n√≠
  let currentGroupImgs = [];  // pole <img> element≈Ø t√©≈æe skupiny (i kdy≈æ jsou skryt√©)
  let currentIndex = 0;       // index pr√°vƒõ zobrazen√©ho obr√°zku v t√©to skupinƒõ

  // 3) Najdeme v≈°echny karty, kter√© maj√≠ data-group (tj. i ty schovan√© .card.hidden)
  const cards = document.querySelectorAll('.card[data-group]');

  // Pomocn√° funkce: vr√°t√≠ pole <img> v r√°mci karet se stejn√Ωm data-group
  function getImgsInGroup(groupName) {
    const arr = [];
    cards.forEach(card => {
      if (card.dataset.group === groupName) {
        const img = card.querySelector('img');
        if (img) arr.push(img);
      }
    });
    return arr;
  }

  // 4) Funkce, kter√° vykresl√≠ cel√Ω overlay: hlavn√≠ obr√°zek + mini-n√°hledy ostatn√≠ch
  function renderOverlay() {
    const mainImgEl = document.getElementById('overlay-main-img');
    const thumbsContainer = document.getElementById('overlay-thumbs');

    // 4.1) Vykresl√≠me hlavn√≠ obr√°zek
    const clickedImg = currentGroupImgs[currentIndex];
    mainImgEl.src = clickedImg.src || clickedImg.dataset.src;
    mainImgEl.alt = clickedImg.alt || '';

    // 4.2) Vyƒçist√≠me p≈ôedchoz√≠ mini-n√°hledy
    thumbsContainer.innerHTML = '';

    // 4.3) Pokud je ve skupinƒõ v√≠ce ne≈æ jeden obr√°zek, vytvo≈ô√≠me mini-n√°hledy
    if (currentGroupImgs.length > 1) {
      currentGroupImgs.forEach((imgEl, idx) => {
        if (idx === currentIndex) return; // p≈ôeskoƒçit hlavn√≠ obr√°zek
        const thumb = document.createElement('img');
    // Pokud imgEl.src nen√≠ (je pr√°zdn√© kv≈Øli lazy), pou≈æijeme data-src
        const realSrc = imgEl.src || imgEl.dataset.src;
        thumb.src = realSrc;

        thumb.alt = imgEl.alt || '';
        thumb.addEventListener('click', () => {
          currentIndex = idx;      // p≈ôepneme index na ten, na kter√Ω u≈æivatel kliknul
          renderOverlay();         // p≈ôekresl√≠me cel√Ω overlay znovu
        });
        thumbsContainer.appendChild(thumb);
      });
    }

    // 4.4) Zobraz√≠me overlay
    overlay.style.display = 'flex';
  }

  // 5) P≈ôid√°me listener na v≈°echny karty s data-group (vƒçetnƒõ tƒõch skryt√Ωch .hidden)
  cards.forEach(card => {
    card.addEventListener('click', () => {
      const groupName = card.dataset.group;
      if (!groupName) return;

      // 5.1) Vytvo≈ô√≠me pole v≈°ech <img> stejn√© skupiny
      currentGroupImgs = getImgsInGroup(groupName);

      // 5.2) Najdeme v tom poli index pr√°vƒõ kliknut√©ho obr√°zku
      const clickedImg = card.querySelector('img');
      const idx = currentGroupImgs.findIndex(el => el === clickedImg);
      currentIndex = idx >= 0 ? idx : 0;

      // 5.3) Vykresl√≠me overlay (otev≈ôeme fullscreeen)
      renderOverlay();
    });
  });

  // 6) Zav≈ôen√≠ overlaye: kliknut√≠m na k≈ô√≠≈æek
  document.getElementById('overlay-close').addEventListener('click', () => {
    overlay.style.display = 'none';
    document.getElementById('overlay-thumbs').innerHTML = '';
  });

  // 7) Zav≈ôen√≠ overlaye: kliknut√≠m mimo (do pozad√≠, nikoli na obr√°zek ani mini)
  overlay.addEventListener('click', e => {
    if (e.target === overlay) {
      overlay.style.display = 'none';
      document.getElementById('overlay-thumbs').innerHTML = '';
    }
  });
})();











/* ‚Äî SCHOV√ÅN√ç / ZOBRAZEN√ç HLAVIƒåKY P≈òES OPACITY ‚Äî */
(() => {
  const header = document.getElementById('hero-header');
  let prev = window.scrollY;

  window.addEventListener('scroll', () => {
    const cur = window.scrollY;

    if (cur > prev && cur > 80) {   // 80 px = kousek pod header
      header.classList.add('hidden');   // scroll dol≈Ø
    } else {
      header.classList.remove('hidden'); // scroll nahoru
    }
    prev = cur;
  });
})();

document.addEventListener("DOMContentLoaded", () => {
  // 1) najdeme v≈°echny obr√°zky s t≈ô√≠dou 'lazy'
  const lazyImages = document.querySelectorAll("img.lazy");

  if (lazyImages.length) {
    // 2) vytvo≈ô√≠me Observer
    const observer = new IntersectionObserver((entries, obs) => {
      entries.forEach(entry => {
        // kdy≈æ se obr√°zek p≈ôibl√≠≈æ√≠ aspo≈à 10 % do viewportu
        if (entry.isIntersecting) {
          const img = entry.target;

          // 3) nastav√≠me skuteƒçn√Ω src z data-src
          img.src = img.dataset.src;

          // 4) kdy≈æ se obr√°zek plnƒõ naƒçte, p≈ôid√°me t≈ô√≠du 'loaded'
          img.addEventListener("load", () => {
            img.classList.add("loaded");
            // volitelnƒõ m≈Ø≈æeme zru≈°it jak√©koli pozad√≠, pokud jsi d≈ô√≠ve definoval .lazy { background-color... }
            img.style.background = "none";
          });

          // 5) u≈æ ho pak d√°l nepozorujeme
          obs.unobserve(img);
        }
      });
    }, {
      rootMargin: "200px 0px",  // st√°hni obr√°zek 200px p≈ôed t√≠m, ne≈æ je vidƒõt
      threshold: 0.1            // spust√≠ se, kdy≈æ je alespo≈à 10 % obr√°zku v zorn√©m poli
    });

    // 6) a nyn√≠ ka≈æd√© 'img.lazy' p≈ôid√°me do Observeru
    lazyImages.forEach(img => {
      observer.observe(img);
    });
  }

  // (Pod t√≠m m≈Ø≈æe≈° nechat sv≈Øj existuj√≠c√≠ k√≥d pro 
  //  ‚Äì fullscreen overlay 
  //  ‚Äì scroll handler hlaviƒçky 
  //  ‚Äì atd. ‚Äì ale u≈æ ne dvakr√°t ≈ôe≈°it `.lazy`.)
});
